//============================================================================
// Name        : RTest.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <RInside.h>                    // for the embedded R via RInside
#include <iostream>
#include <string>
#include <fstream>
#include <streambuf>
#include "gtest/gtest.h" // Google testing framework.




using namespace Rcpp;

// Benchmark1 
TEST(RTest, benchmark1) {
    RInside R;              // create an embedded R instance
    //R["txt"] = "Hello, world!\n";	// assign a char* (string) to 'txt'
    // Load libraries and database.
	R.parseEvalQ("library(MorpheusData)");
	R.parseEvalQ("library(tidyr)");
	R.parseEvalQ("library(dplyr)");

    // read input/output tables to C++.
    // Please check DataFrame.h if you want to access the cell or each row.
    Rcpp::DataFrame ds = R.parseEval("b1_input1"); 
    std::cout << "input rows:" << ds.nrows() << "\n";
    std::cout << "input cols:" << ds.size() << "\n";

    // into string vector cnames
    Rcpp::CharacterVector cnames = R.parseEval("colnames(b1_input1)");   
    //for (int i=0; i<M.ncol(); i++) {
    for (int i=0; i<4; i++) {
        std::cout << "Column " << cnames[i] 
                  <<  std::endl;
    }

    // Program generated by Ruben. Hardcode by Yu.
    std::string program = "out <- spread(b1_input1, key, value)";
    R.parseEval(program); 
    // assert the result (out) should be equal to the target: b1_output1
    bool res = R.parseEval("all.equal(out, b1_output1)"); 

	EXPECT_EQ(true, res);
}

int main(int argc, char **argv) {
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}
